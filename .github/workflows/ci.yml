name: CI

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/**'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  FORCE_COLOR: 1

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        gcc-version: [11, 12, 13]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install NetCDF
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev libnetcdff-dev

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: ${{ matrix.gcc-version }}

      - name: Setup FPM
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache FPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            build
            ~/.fpm
          key: ${{ runner.os }}-fpm-${{ matrix.gcc-version }}-${{ hashFiles('fpm.toml') }}
          restore-keys: |
            ${{ runner.os }}-fpm-${{ matrix.gcc-version }}-
            ${{ runner.os }}-fpm-

      - name: Build with FPM
        run: fpm build --flag "$(nf-config --fflags)" --verbose

      - name: Run example with real S3 data (continue on error)
        run: |
          # This downloads real ESGF climate data from public S3 bucket
          # Allow failure since it depends on external service availability
          fpm run s3_netcdf_example --flag "$(nf-config --fflags)" --verbose || echo "Example failed but continuing..."
        continue-on-error: true

      - name: Check for temp file cleanup
        if: runner.os == 'Linux'
        run: |
          echo "Checking for leftover temp files..."
          if ls /dev/shm/s3_netcdf_* 2>/dev/null; then
            echo "Warning: Temp files found in /dev/shm"
            ls -lh /dev/shm/s3_netcdf_*
          else
            echo "OK: No temp files found in /dev/shm"
          fi
          if ls /tmp/s3_netcdf_* 2>/dev/null; then
            echo "Warning: Temp files found in /tmp"
            ls -lh /tmp/s3_netcdf_*
          else
            echo "OK: No temp files found in /tmp"
          fi

  # Separate job to test with unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install NetCDF
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev libnetcdff-dev

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Setup FPM
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: fpm test --flag "$(nf-config --fflags)" --verbose

  minio-integration-tests:
    name: MinIO Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start MinIO
        run: |
          docker run -d -p 9000:9000 -p 9001:9001 \
            --name minio \
            -e "MINIO_ROOT_USER=minioadmin" \
            -e "MINIO_ROOT_PASSWORD=minioadmin123" \
            minio/minio:latest server /data --console-address ":9001"

          # Wait for MinIO to be ready
          timeout 30 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 1; done'

      - name: Setup MinIO Client (mc)
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/

          # Configure mc alias
          mc alias set local http://localhost:9000 minioadmin minioadmin123

          # Create test bucket
          mc mb local/test-bucket
          mc ls local/

      - name: Install NetCDF
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev libnetcdff-dev

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 12

      - name: Setup FPM
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 netCDF4 numpy

      - name: Create test fixtures and upload to MinIO
        env:
          S3_ENDPOINT_URL: http://localhost:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin123
        run: |
          echo "Creating test NetCDF files..."
          python test/scripts/create_fixtures.py

          echo "Uploading fixtures to MinIO..."
          python test/scripts/upload_minio.py

      - name: Verify uploads with mc
        run: |
          echo "Checking bucket contents with MinIO client..."
          mc ls local/test-bucket/

      - name: Build all executables (including integration test)
        run: |
          echo "Building all executables..."
          fpm build --flag "$(nf-config --fflags)" --verbose

      - name: Run MinIO integration test
        env:
          S3_ENDPOINT: http://localhost:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin123
          S3_BUCKET: test-bucket
        run: |
          echo "Running MinIO integration test..."
          fpm run test_minio_integration --flag "$(nf-config --fflags)"

      - name: MinIO logs (if failure)
        if: failure()
        run: docker logs minio

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          grep -r "TODO\|FIXME" src/ app/ || echo "No TODO/FIXME found"

      - name: Check file permissions
        run: |
          echo "Checking for executable source files..."
          find src app -type f -executable || echo "No executable source files found"
